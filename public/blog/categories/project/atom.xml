<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project | Nicks Octopress Blog]]></title>
  <link href="http://octopress.nicksdevspot.com/blog/categories/project/atom.xml" rel="self"/>
  <link href="http://octopress.nicksdevspot.com/"/>
  <updated>2016-04-10T14:41:23-07:00</updated>
  <id>http://octopress.nicksdevspot.com/</id>
  <author>
    <name><![CDATA[Nicholas Lau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Javascript]]></title>
    <link href="http://octopress.nicksdevspot.com/blog/2015/12/07/learning-javascript/"/>
    <updated>2015-12-07T15:22:29-08:00</updated>
    <id>http://octopress.nicksdevspot.com/blog/2015/12/07/learning-javascript</id>
    <content type="html"><![CDATA[<h2>Under Construction</h2>

<h3>Table of Contents</h3>

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#mdnreintroduction">MDN Reintroduction</a></li>
<li><a href="#crockfordonjavascript">Crockford on JavaScript</a></li>
<li><a href="#mdngamedevelopment">MDN Game Development Workflows</a></li>
<li><a href="#buildingagame">Building a Game</a></li>
</ul>


<p><a name="introduction"></a></p>

<h3>Introduction</h3>

<p>I&rsquo;ve always been interested in learning Javascript, but have been too overwhelmed by the abundance of resources out there. I finally took the time to do some thorough looking around with lead me to this Stack Overflow <a href="http://goo.gl/iPMGV">link</a> on resources for learning Javascript. This lead me to the MDN Javascript Reintroduction and Crockfords Lectures.</p>

<!-- more -->


<p><a name="mdnreintroduction"></a></p>

<h3>MDN Reintroduction</h3>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">Mozilla Developer Network (MDN) Reintroduction to JavaScript</a></li>
<li><a href="http://beej.us/blog/data/javascript-prototypes-inheritance/">Beej Guide: JavaScript Prototypes and Inheritance</a></li>
</ul>


<p>Learning javascript made me realize how little I knew about the languages I was comfortable with. Programming in my comfort languages (Java/C++) had become almost like being fluent in English, I forgot a many of the little details and rules here and there.</p>

<p>It was a good dose of reality to get me out of my comfort zone and push me to learn the deeper details of languages.</p>

<p><a name="crockfordonjavascript"></a></p>

<h3>Crockford on JavaScript</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=JxAXlJEmNMg">Volume 1: The Early Years</a></li>
<li><a href="https://www.youtube.com/watch?v=RO1Wnu-xKoY">Chapter 2: And Then There Was JavaScript</a></li>
<li><a href="https://www.youtube.com/watch?v=ya4UHuXNygM">Act III: Function the Ultimate</a>

<ul>
<li>This talk also convinced me to pick up Little Schemer, promising that it would &ldquo;change the way you think, and there aren&rsquo;t a lot of books that will do that&rdquo;</li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=Fv9qT9joc0M">Episode IV: The Matamorphasis of Ajax</a></li>
<li><a href="https://www.youtube.com/watch?v=47Ceot8yqeI">Part 5: The End of All Things</a></li>
<li><a href="https://www.youtube.com/watch?v=QgwSUtYSUqA">Scene 6: Loopage</a></li>
<li><a href="https://www.youtube.com/watch?v=UTEqr0IlFKY">Level 7: ECMAScript 5: The new Parts</a></li>
<li><a href="https://www.youtube.com/watch?v=taaEzHI9xyY">Section 8: Programming Style &amp; Your Brain</a></li>
</ul>


<p>The first two talks are a history lesson, very informative. A lot of the languages and software architects have come up in random reading around the internet, such as some of my favorite (research) papers:</p>

<ul>
<li>Ken Thompson&rsquo;s Turing Award Lecture, &ldquo;Reflections on Trusting Trust&rdquo;</li>
<li>Lamport&rsquo;s &ldquo;The Future of Computing: Logic or Biology&rdquo;</li>
<li>CAR Hoare, &ldquo;The Emperor&rsquo;s Old Clothes&rdquo;</li>
<li>Fred Brooks (1986), &ldquo;No Silver Bullet&rdquo;</li>
<li>Parnas, David L. “Designing Software for Ease of Extension and Contraction.”</li>
</ul>


<p>I really enjoyed the foundations of JavaScript. How Netscape had Brendan Eich create a web language. He wanted to base it on Scheme, but Netscape put its foot down and said they wanted it to be more approachable. So Eich used the syntax of JavaScript, the first-class functions of Scheme, and the Prototype Chain of Self to make one of the most popular languages of all time. And in 4 weeks! Although this short time frame is responsible for a lot of JavaScript&rsquo;s blunders which are slowly being repaired (ES6 Strict was a big jump).</p>

<p>Some benefits of Prototyped OOP:</p>

<ul>
<li>Trivial to make new &ldquo;classes&rdquo;, avoids lots of boilerplate</li>
<li>More &ldquo;functional&rdquo; style</li>
<li>Change behavior at runtime</li>
<li>Easy multiple inheritance, don&rsquo;t need crazy and hard to maintain type hierarchy</li>
<li>Property modifiers</li>
</ul>


<p>Wouldn&rsquo;t be complete without cons list:</p>

<ul>
<li>Lose static typing</li>
<li>Performance overhead, still have to check inheritance hierarchy and compiler can&rsquo;t help you out</li>
<li>New is scary, can easily accidentally clobber global object</li>
</ul>


<p>Now that I knew a lot of the theory behind Javascript, it was time to practice applying it. I decided to make a game.</p>

<p><a name="mdngamedevelopment"></a></p>

<h3>MDN Game Development Workflows</h3>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Workflows/2D_Breakout_game_pure_JavaScript">2D Breakout in pure JS</a>

<ul>
<li><a href="/resources/games/breakout/">Try it!</a></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Workflows/2D_Breakout_game_Phaser">2D Breakout game using Phaser</a>

<ul>
<li><a href="/resources/games/breakoutPhaser/">Try it!</a></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Workflows/HTML5_Gamedev_Phaser_Device_Orientation">2D Maze game with Device Orientation using Phaser</a>

<ul>
<li><a href="/resources/games/phaserMaze/">Try it!</a></li>
</ul>
</li>
</ul>


<p><a name="buildingagame"></a></p>

<h3>Building a Game</h3>

<p>You can try it out, it is still a work in progress though. It was really fun to not just program this, but design it, create the maps&hellip; to have complete control. I did have several issues developing it though, mostly with JavaScript.</p>

<ul>
<li><a href="https://github.com/nmlau/vim-maze">My Game</a>

<ul>
<li><a href="/resources/games/vimMaze/">Try it!</a></li>
</ul>
</li>
</ul>


<p>List of issues and what I learned:</p>

<ul>
<li>Hosting issues: browser was caching objects so when I updated and went to test my changes&hellip; everything would be the same. Octopress had some issues with actually changing letter capitalization in the repo that prevented a few scripts from loading properly.</li>
<li>Maps: used Tile Map Editor to generate json maps.</li>
<li>Pass in method, not method call as callback. If you pass the method call then it will only get called once AND have the wrong context.</li>
<li>Make sure to pass the context. &lsquo;this&rsquo; isn&rsquo;t passed around implicitly like in java, context is generally one part of a long list of arguments.</li>
<li>Using an unfamiliar framework in a new language was difficult. While Java does have varargs, the way Javascript parameters work was still weird, like how you could leave them out and wouldn&rsquo;t even get a warning. Even with the docs open, a lot of the high level functions had huge lists of parameters and I would often misread, misunderstand, or forget something.</li>
<li>Modularizing. Awkward in Phaser, it doesn&rsquo;t provide a built in way to do it. This is because sites like to have games in a single minified js file. Being used to OOPs highly structured and separated classes this was kind of weird. But hey, this is what you learn new technologies and languages for.</li>
<li>Debugging. The console has awesome debugger tools built in. Just throw the &lsquo;debugger&rsquo; statement into your Javascript code. I make sure to use the &lsquo;.js&rsquo; library rather than &lsquo;min.js&rsquo; so I can use the debugger to source code dive.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi Alarm]]></title>
    <link href="http://octopress.nicksdevspot.com/blog/2015/12/01/raspberry-pi-alarm/"/>
    <updated>2015-12-01T16:16:28-08:00</updated>
    <id>http://octopress.nicksdevspot.com/blog/2015/12/01/raspberry-pi-alarm</id>
    <content type="html"><![CDATA[<h2>Under Construction</h2>

<h3>Table of Contents</h3>

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#components">Components</a></li>
<li><a href="#setup">Setup</a></li>
<li><a href="#programming">Programming</a></li>
<li><a href="#brickwalls">Brickwalls</a></li>
<li><a href="#nextsteps">Next Steps</a></li>
</ul>


<p><a name="introduction"></a></p>

<h3>Introduction</h3>

<p><img src="/images/pi_post/pi.jpg" title="&lsquo;pi.jpg&rsquo;" ></p>

<p>I&rsquo;ve always had trouble waking up. Sometimes I wake up, sometimes I don&rsquo;t, sometimes I just end up lying in bed&hellip; it&rsquo;s been a lifetime point of stress. But in the last few months I&rsquo;ve found a solution that works for me. I use the <a href="http://www.sleepcycle.com/">Sleep Cycle Phone App</a> to gently wake me up so I&rsquo;m ready for my out of bed alarm that goes off at 630 (weekdays) or 830 (weekends). This forces me to get out of bed to walk across the room and turn it off.</p>

<p>But with the larger problem solved, there&rsquo;s always more you can do to make it more perfect. Right now I&rsquo;m using an iPad as my out of bed alarm. There&rsquo;s a lot of problems here: it&rsquo;s a really pricey device being used for a very simple task, it can be inefficient to turn off or adjust alarm times (I don&rsquo;t enjoy the gui), the battery will eventually run out, and if I wake up early there&rsquo;s no kill button to stop my normal alarm from going off without remembering to turn them back on.</p>

<p>There&rsquo;s a lot of pros though, the battery lasts for several weeks, it doesn&rsquo;t need to be plugged in (I&rsquo;m a little OCD and don&rsquo;t want extra wires).</p>

<p>On top of this, I&rsquo;ve been hearing about Raspberry Pi&rsquo;s for years and have always wanted to mess around with one. This seemed like the perfect project to get started on the DIY journey.</p>

<p>Note: this isn&rsquo;t so much of a guide as my reflections on my journey to solidify the things I learned.</p>

<!-- more -->


<p><a name="components"></a></p>

<h3>Components</h3>

<p>How I chose my components, used these two guides: <a href="http://www.howtogeek.com/138281/the-htg-guide-to-getting-started-with-raspberry-pi/all/">Getting Started Guide</a> and <a href="http://www.htpcbeginner.com/raspberry-pi-accessories-for-xbmc-media-center/2/">Component Guide</a></p>

<p>Here&rsquo;s what I bought:</p>

<ul>
<li><a href="http://www.alliedelec.com/raspberry-pi-raspberry-pi-2-model-b/70465426/">Raspberry Pi 2</a></li>
<li><a href="http://www.amazon.com/gp/product/B004TA0AUW/">MicroSD Card - Transcend Class 10</a> (preferably preloaded with NOOBS, but it&rsquo;s easy to set it up yourself)</li>
<li><a href="http://www.amazon.com/dp/B003MTTJOY">WiFi Adapter - Edimax</a> I got the Edimax rather than the <a href="http://www.amazon.com/dp/B00EQT0YK2/">Panda 300Mbps</a>, because it has a nano adapter and the Panda is overkill at 300Mbps. Or just use ethernet.</li>
<li><a href="http://www.amazon.com/gp/product/B00OY7HR1U">Power Adapter - Northpada</a> Northpada because better reviews, higher mAH, one piece charger. In hindsight, I should have just used one of the many micro USB cables I have sitting around and plugged them into a usb outlet.</li>
<li><a href="http://www.amazon.com/gp/product/B00MQLB1N6">Case</a>, although at first I accidentally bought the a <a href="http://www.amazon.com/gp/product/B008TCUXLW">Model 1 Case</a></li>
</ul>


<p>Already owned:</p>

<ul>
<li><a href="http://www.amazon.com/Dell-UltraSharp-27-Inch-LED-Lit-Monitor/dp/B00P0EQD1Q">Monitor</a>, any monitor will do. HDMI is more convenient though</li>
<li><a href="http://shop.daskeyboard.com/products/das-keyboard-ultimate-model-s">Keyboard</a>, you can use any usb keyboard, I had a few lying around. Wireless is always convenient too</li>
<li><a href="http://www.amazon.com/gp/product/B003TG75EG">Mouse</a>, and any usb mouse. Wireless always good</li>
<li><a href="http://www.amazon.com/gp/product/B0002L5R78">HDMI Display Cable</a>, Raspberry Pi has a HDMI display port, I&rsquo;m sure you&rsquo;ve got one lying around. Or if your monitor can&rsquo;t do HDMI, use one of the many adapters out there. All modern display cables are digital and can be converted from one to another.</li>
<li><a href="http://www.amazon.com/gp/product/B00316263Y">Ethernet</a>, Got hundreds of these too</li>
<li><a href="http://www.amazon.com/dp/B00YARCGOC">Speaker</a>, Choose the favorite one you&rsquo;ve got lying around. All you need is a 3.5mm Audio cable to plug it in</li>
</ul>


<p><a href="http://ozzmaker.com/2013/10/24/how-to-control-the-gpio-on-a-raspberry-pi-with-an-ir-remote/">Hooking up Infrared Remote</a>:</p>

<ul>
<li><a href="http://www.adafruit.com/products/389">Mini Remote Control (IR)</a></li>
<li><a href="http://www.adafruit.com/products/157">IR Receiver Sensor</a></li>
<li>Ribbon Cable</li>
<li>Breakout (40 pin)</li>
<li>Breadboard</li>
<li>Wires (3v3 power to IR Out, Ground to IR GND, GPIO 18 - PCM_CLK to IR Vs)</li>
<li>Notes: Might be able to attach IR sensor straight to GPIO. Also, LEDs and most wires are just for testing. Yes, can solder wires straight to GPIO, but that would be permanent. But I could solder wires to breakout and not need the breadboard. Also, don&rsquo;t need LEDs or capacitors for testing, can see input to socket on commandline. Getting all these components was somewhat of a hassle, borrowed parts from a friend but didn&rsquo;t realize he had the old 24 pin breakout/ribbon.</li>
</ul>


<p>Optional:</p>

<ul>
<li>Heatsink, don&rsquo;t think you need this unless I&rsquo;m running HD video constantly. A lot of people, like my dad, use their Pi&rsquo;s as DVRs</li>
</ul>


<p>I ended up doing a headless setup where I ssh&rsquo;d in from my laptop (more on this later). This eliminated the need for: Monitor, Keyboard, Mouse, Display Cable. And switching to ethernet meant no need for a wifi adapter</p>

<p><a name="setup"></a></p>

<h3>Setup</h3>

<ul>
<li>Download Noobs (make sure not copy files in, not the folder)</li>
<li>Download and use formatter, make sure to have lock switch off</li>
<li>Plug everything in</li>
<li>Turn on, Install Raspian</li>
<li>Initial Settings screen: Turn on SSH, expand filesystem</li>
</ul>


<p><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;t=74176">Setting up headless</a>:
I&rsquo;m a little bit of a neat freak. And I don&rsquo;t have enough space at the moment for a dedicated work bench. So shortly after I went through all the trouble of acquiring and plugging in all the components plugged in I realized I could do better. A headless setup means all the pi needs is an internet connection (wifi adapter or ethernet) and I can use it over ssh.</p>

<p>I got to learn a lot about networking, having to mess around with commands like &lsquo;arp -a&rsquo;, &lsquo;nmap&rsquo;, modifying /etc/ssh/ssh_config, <a href="http://whatismyipaddress.com/mac-address">learn about MAC and ARP addresses</a></p>

<p>Even once I was connected, the workflow was mediocre until I was able to setup:
File Transfer using <a href="http://raspberrypi.stackexchange.com/questions/8950/copy-files-from-osx-to-from-pi">afp (appletalk protocol) to pi</a>
-Install netatalk on pi, afp in from mac
-This let me use finder and all my os x apps to access my pi&rsquo;s files. Much better than the trouble I was having with Filezilla. Incredibly convenient although it did leave hidden .AppleDouble folders in every directory
Another huge thing was using tmux combined with dtach. Tmux meant I only had to ssh in one time, then I could split that session into several windows. dtach allowed me to shut the pi off, ssh back in jump right back to my desired tmux session.</p>

<p>Random note: sshing in forced me to use command line a lot. Which inspired me to read a few <a href="https://github.com/jlevy/the-art-of-command-line">guides on CLI</a>, <a href="https://danielmiessler.com/study/vim/">vim</a>, that got me play with my profiles (my vim is beautiful now - <a href="/images/pi_post/tmux_solarized_dark_profile.png">image of Solarized profile with tmux</a>) to setup my profiles like <a href="https://github.com/nmlau/profiles">this</a>. Not to mention finally setting up zsh, more convenient keykindings, etc.</p>

<p><a name="programming"></a></p>

<h3>Programming</h3>

<p>Source available on <a href="https://github.com/nmlau/RPiAlarm">github</a></p>

<p>I got my inspiration from: <a href="https://www.youtube.com/watch?v=julETnOLkaU">Speaking Alarm Clock</a>, <a href="https://github.com/skiwithpete/alarmpi">github available here</a>. And some better <a href="https://www.raspberrypi.org/forums/viewtopic.php?f=41&amp;t=95500">Alternative Alarm Clock Projects</a>, most notably the <a href="https://github.com/bubbl/SimpleGoogleAlarmClock">Simple Google Alarm Clock</a></p>

<p>One set the alarm with chronjobs, another by hardcoding, but I really liked the Google Calendar integration. And plan to add some pyfeed stuff, particularily to get weather. I also stole how they used datetime module, config parser, os and mpg123 to play sound files. However, all these projects were deprecated because of changes to the Google Calendar Service API.</p>

<p>One of them suggested setting up a socket to listen for real world events, so I&rsquo;m setting one up to work with an Infrared Remote (IR).</p>

<p>Was actually pretty easy to setup, I was worried since it seemed like there were a lot of places for it to go wrong. I&rsquo;ve never breadboarded before so I was pleasantly surprised by how easy it was. Python and Linux provide easy to use libraries like lirc to decode infrared signals and provide them to a socket. I did have some trouble with mode2 (measures pulse/space length of infarred signals), but was able to troubleshoot that by modifying some .conf files.</p>

<p><a name="brickwalls"></a></p>

<h3>Brickwalls</h3>

<p>Here are some problems that took longer to solve than they should have. In other words, things I learned:</p>

<ul>
<li>Setup was actually the longest part, I had to follow a lot of tutorials that didn&rsquo;t work without going in and understanding the commands better</li>
<li>Changes in Google Calendar API also slowed me down more than they should have. I accidentally setup the deprecated API at first&hellip; wish they had thrown a note on the article that it had been deprcated two years ago!</li>
<li>Just learning python so had some trouble here, easily fixed though. Just read some guides, learned syntax better, got the normal tools like pdb for debugger</li>
<li>Learned how to use a GPIO, got my EE friends to show me how to use a breadboard, ribbon cable, wiring, etc. Closest I had gotten to this stuff before was an FPGA in my embedded systems course or using VHDL to design a CPU although no actual hardware was involved in that.</li>
<li>Time was a huge hassle, I learned a lot about how the time modules worked together, and about formatting. I&rsquo;ll probably swap that all out at some point and just use the arrow module</li>
</ul>


<p><a name="nextsteps"></a></p>

<h3>Next Steps</h3>

<p>You can see in the picture at the top that it is a mess of components. Breadboarding is more of a testing thing, I&rsquo;ll have to learn to solder to get around it. Luckily I have lots of Mechanical Engineering friends. It still won&rsquo;t be organized enough for me though, next it will need a case/enclosing to keep it all in one place and organize the cables it needs (power/ethernet). As to why I want to use ethernet, my home&rsquo;s wifi can be inconsistent and I don&rsquo;t trust it to wake me up.</p>

<p>Power is a huge issue, the iPad I&rsquo;m using for my alarm right now can go for months without being charged. I really like how it doesn&rsquo;t need a wire running to it&hellip; I&rsquo;ll have to look into how I can get a wireless setup for my pi alarm clock. I know they have external battery packs, but can it last as long as the iPad can?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Ruby on Rails]]></title>
    <link href="http://octopress.nicksdevspot.com/blog/2014/06/13/learning-ruby-on-rails/"/>
    <updated>2014-06-13T17:16:28-07:00</updated>
    <id>http://octopress.nicksdevspot.com/blog/2014/06/13/learning-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2>Under Construction</h2>

<h3>Table of Contents</h3>

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#learningrails">Learning Rails</a></li>
<li><a href="#apps">Apps</a></li>
<li><a href="#octopress">Octopress</a></li>
<li><a href="#whatilearned">What I Learned</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#technologies">Technologies behind this Blog</a></li>
<li><a href="#source">Source</a></li>
</ul>


<p><a name="introduction"></a></p>

<h3>Introduction</h3>

<p>I&rsquo;ve always wanted a personal website, for such a long time that I can&rsquo;t even remember the original reason. But it always felt so difficult, like there would be hoop after hoop to jump through. And there were, but I found that each hoop was very easy to jump through, with fantastic resources and frameworks doing almost the entirety of the leg work.</p>

<p>This was one of my first truly independent projects. Prior to this I had always had a partner, professor, TA, etc to fall back on if I got stuck. So this project was stepping out of my comfort zone, which is always difficult. But as I&rsquo;ve found, pushing those boundaries has great reward and brings a certain feeling of personal pride and independence.</p>

<p><a name="learningrails"></a></p>

<h3>Learning Rails</h3>

<p>To learn Ruby on Rails I made use of <a href="https://www.codecademy.com/learn/ruby">Codeacademy Ruby Guide</a>, <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Ruby on Rails Tutorial</a>, and <a href="http://railscasts.com/">Railscast</a>. Codeacademy was fairly basic and I think is catered towards complete beginners. But looking through there I found some good basic guides to brush up on things like git or commandline. Michael Hartl&rsquo;s tutorial was incredible and even after finishing it I would come back and use it as a reference guide. For things that Michael Hartl&rsquo;s guide couldn&rsquo;t cover I would look through Railscast.</p>

<p><a name="apps"></a></p>

<h3>Apps</h3>

<p>I started off wanting to build a blog, so I modified Hartl&rsquo;s code for that purpose. Building a dynamic mysql blogged webapp. I wanted to try something a little bit different as well so I build a <a href="upload-app.nicklau.io/">Photo Uploading app</a>. It seemed like it would be difficult but by utilitizing Ruby on Rails gems it turned out to be easy. The Cloudinary gem was quick to setup and did all the heavy lifting, offering a way to upload and store images in the cloud.</p>

<p>I wasn&rsquo;t entirely happy with the blog though, as a one person blog I found the dynamic nature to be redundant. Then I got lucky browsing around the internet reading blogs. I found that this <a href="http://octopress.org/docs/setup/">&lsquo;Octopress Blog: A Blogging Framework for Hackers&rsquo;</a> came up repeatedly, so I decided to check it out. Turns out it was exactly what I was looking for. I thought Ruby on Rails did a lot of the work for me, but Octopress utilizes Jekyll to do even more. It generates posts, provides tools like improved image tags. And above all it is static, so no need for a database, one less thing to worry about breaking. It also takes care of the UI, and lets you download template themes for a personal flare. Or quickly plugin fun additions like Disqus or Google Analytics. Above all its static, so I don&rsquo;t have to worry about the model part of MVC.</p>

<p><a name="whatilearned"></a></p>

<h3>What I Learned</h3>

<p>I learned far more than just Ruby and Ruby on Rails. The nature of an independent project is that every step you have to search for the proper tool to do this or that, and you end up finding a lot of new things. For example, I fell in love with the three window (commandline, editor, browser) workflow. I got more comfortable with using commandline debuggers, helping to reduce my dependence on the bloated IDEs I had been stuck with in college. The commandline is very romanticized and it was awesome to get to know it better.</p>

<p>I found out how easy things are, especially since Ruby on Rails has such a strong community. Heroku makes it effortless to deploy your app, gems like New Relic can monitor your app with less than 10 lines and 10 minutes of work. When I wanted to speed my app up, it took copying and pasting in two short blurbs and installing a gem. The hours I spent building a login system from scratch in Michael Hartl&rsquo;s tutorial was replaced instantaneously with the Devise gem (the understanding I got from the tutorial can not be replaced though). I remember setting the devise gem up and looking for the generated code (I thought it was a scaffold). But after checking git and seeing that there were actually no changes to the source&hellip; that the system actually worked!</p>

<p>This is where I started to understand how much of programming is simply reading and interface and plugging to pieces together. How layers like ActiveRecord could be laid on top of your database so that it could handle anything from postgresql, mysql, etc. How REST could be laid on top off resources and interact with them through universal verbs/actions.</p>

<p>I learned to write user stories and plan out my code better before I started typing (school projects would generally provide structure). I learned to use git better, to branch on features and merge them back only once completed. And that they were only completed once that had an automated test suite. And to use Test Driven Development to make sure they that new features were fulfilling their test cases. I had theoretically known what MVC and REST were, but here I got some first hand experience with them. Things I take for granted like how to write in Markdown.</p>

<p>University didn&rsquo;t expose me to the most interesting language, there were a few weeks of ocaml and python, but asides from that mostly Java and C++. I found Ruby to be very refreshing, being able to do things like
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">inject</a>. Or easy list comprehension and array splicing like python. Or how as a dynamic language, it would have really cool methods like &lsquo;method_missing()&rsquo;, lazy evaluation, or would put &lsquo;?&rsquo; or &lsquo;!&rsquo; if it returned a boolean or modified data, respectively. How it had an REPL to play around with an idea, or first class functions (procs, lambdas, closures) intead of the mess that Java callbacks are. It also enforced the idea that despite all the differences, at their root all the languages were very similar. Sure there would be some different syntax, typing, or libraries but in the end it all came down to the idea of structured programming: that everything could be done with a combination of sequence, selection, iteration.</p>

<p>I bought a domain and learned how to use its DNS, which was actually one of the biggest hassles. There isn&rsquo;t a wealth of helpful information online about hosting, and it&rsquo;s very unhelpful that providers work differently so the guides you find aren&rsquo;t entirely applicable. However, the longer it takes you to find something out, the better you understand it, so no harm there.</p>

<p>I learned random invaluable things like Lorem Ipsum and the origins of foobar.</p>

<p><a name="conclusion"></a></p>

<h3>Conclusion</h3>

<p>Overall I found it very analagous to backpacking around Asia. When you first set out its terrifying, you have no one to rely on. But you learn and quickly find everything to be very easy. You meet incredible people who want to help you. You discover new things about yourself and come out of it a stronger and more independent individual.</p>

<p><a name="technologies"></a></p>

<h3>Technologies behind this Blog</h3>

<p>This blog webapp utilizes the technologies/services:</p>

<ul>
<li>Ruby on Rails obviously!</li>
<li>Octopress, powered by Jekyll. A blogging framework for hackers.</li>
<li>gandi.net for hosting and dns services.</li>
<li>Rack::Cache for faster loading</li>
<li>Heroku for hosting online as well as the New Relic addon to stop the dyno from idling.</li>
<li>Devise for user, session, and password management.</li>
<li>Bootstrap to make things look pretty since I’m no css wizard.</li>
<li>Rspec and Capybara for quick automated testing.</li>
</ul>


<p><a name="source"></a></p>

<h3>Source</h3>

<ul>
<li>Source on <a href="https://github.com/nmlau/octopress">github</a></li>
<li>Hosted at <a href="http://www.nicklau.io/">nicklau.io</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
