<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Nicks Octopress Blog]]></title>
  <link href="http://octopress.nicksdevspot.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://octopress.nicksdevspot.com/"/>
  <updated>2016-02-08T17:09:22-08:00</updated>
  <id>http://octopress.nicksdevspot.com/</id>
  <author>
    <name><![CDATA[Nicholas Lau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Commandline Shenanigans]]></title>
    <link href="http://octopress.nicksdevspot.com/blog/2016/01/07/commandline-shenanigans/"/>
    <updated>2016-01-07T14:57:53-08:00</updated>
    <id>http://octopress.nicksdevspot.com/blog/2016/01/07/commandline-shenanigans</id>
    <content type="html"><![CDATA[<h3>Table of Contents</h3>

<p><img src="/images/commandline_post/tmux_solarized_dark_profile.png" title="&lsquo;tmux_solarized_dark_profile.png&rsquo;" ></p>

<ul>
<li><a href="#artofthecommandline">Art of the Command Line</a></li>
<li><a href="#masteringvim">Mastering Vim</a></li>
<li><a href="#tmux">Tmux</a></li>
<li><a href="#profiles">Profiles</a></li>
<li><a href="#onelinerforkillingapplications">One-liner for Killing Applications</a></li>
</ul>


<!-- more -->


<p><a name="artofthecommandline"></a></p>

<h3>Art of the Command Line</h3>

<p>I&rsquo;ve always been interested in learning the Command Line better. So I was pretty excited to find this guide on <a href="https://news.ycombinator.com/">Hacker News</a>, or was it <a href="https://www.reddit.com/r/programming/">r/programming</a>? <a href="https://github.com/jlevy/the-art-of-command-line">The Art of the CommandLine</a> by <a href="https://github.com/jlevy">jlevy</a> works as an overview of the most useful things, giving a short introduction so you know what&rsquo;s what. You can then look more into the things using &lsquo;man&rsquo; or a quick google search.</p>

<p>It was a fantastic review of the stuff I knew and introduced me to lots of new tools. Here&rsquo;s a portion of my raw notes on things that were relatively new to me:</p>

<ul>
<li>Everyday Use:

<ul>
<li>xargs (example makes no sense)</li>
<li>HERE document (code block that io redirects list to a command)</li>
<li>mosh (ssh type thing using udp)</li>
<li>percol/fzf (interactive selection of values from output of another command)</li>
</ul>
</li>
<li>Processing Files and Data:

<ul>
<li>uniq (uniq reports or filters out repeated lines in a file, these would be perfect for lucky times)</li>
<li>cut/paste/join, pretty intuitive names but never used or seen these used before</li>
<li>awk/sed, awk is a pattern directed scanning and processing language, sed is a stream editor</li>
<li>repren, for complex renames</li>
<li>rysnc, versatile and fast file copying tools</li>
<li>shuf, shuffle or select random names</li>
<li>patch, works with diff to be the standard for patching source code</li>
<li>hd/hexdump/xxd/bvi/biew/strings+grep/xdelta3 for binary files&hellip;</li>
<li>iconv, convert text encodings</li>
<li>split/csplit to split by size or pattern</li>
<li>zless, zmore, zcat, zgrep to operate on compressed files</li>
</ul>
</li>
<li>Cool things:

<ul>
<li>Press ctrl-r repeatedly to cycle through more matches,&hellip; or hit the right arrow to put the result in the current -line</li>
<li>ctrl-a, #, enter //enters command as comment so you can go back and edit it later</li>
<li>Brace expansion using {&hellip;}, cp somefile{,.bak} (which expands to cp somefile somefile.bak)</li>
<li>The output of a command can be treated like a file via &lt;(some command). ie, vim &lt;(env)</li>
<li>man ascii</li>
<li>tmux/screen to multiplex the screen (byobu to enhance tmux, dtach for session persistence)</li>
<li>fpp (pathpicker) looks incredibly useful</li>
<li>Tab literal, ctrl-v [Tab] or write $&lsquo;\t&rsquo; (the latter is better as you can copy/paste it)</li>
<li>OSX: &ldquo;Use Option as Meta key&rdquo;. To enable the Option key in Mac OS Terminal as an alt key (such as used in the commands above like alt-b, alt-f, etc.). Does wonders for emacs.</li>
</ul>
</li>
</ul>


<p>After going through this I decided to dive deeper into:</p>

<ul>
<li>xargs</li>
<li>grep</li>
<li>vim</li>
<li>tmux/dtach (although I wasn&rsquo;t happy with dtach and use tmuxinator instead)</li>
<li>zsh</li>
<li>Profiles (terminal, bash, key remapping, etc)</li>
<li>Cleaning up my environment (ex: had brew and macports fighting with eachother)</li>
</ul>


<p><a name="masteringvim"></a></p>

<h3>Mastering Vim</h3>

<p>Vim needs no introduction. I used vim a lot during university, but just got by rather than pushing the boundaries of what it can actually do. Yes I do love sublime text and neat things it can do like multiple cursors. But vim is incredible, and there is a reason people have been using it for decades.</p>

<p>Inspired by The Art of the CommandLine, I found this went searching for a Vim Guide and found <a href="https://danielmiessler.com/study/vim/">Mastering Vim by Daniel Miessler</a>.</p>

<p>Here&rsquo;s a portion of my notes:</p>

<ul>
<li>u and U interaction is unintuitive to me</li>
<li>CTRL+G, line number+G</li>
<li>CTRL-O, CTRL-I</li>
<li>%</li>
<li>:#,#s/old/new/g</li>
<li>:%s/old/new/g</li>
<li>:%s/old/new/gc</li>
<li>:!</li>
<li>:set ic hls is</li>
<li>:set incsearch</li>
<li>:set noic</li>
<li>:nohlsearch</li>
<li>/ignore\c</li>
<li>:e (followed by CTRL+D)</li>
<li>CTRL+L for redraw</li>
<li>CTRL+[ for ESC</li>
<li>CTRL+E for scroll up</li>
<li>CTRL+Y for scroll down</li>
<li>zz, zt, zb for scroll</li>
</ul>


<p>To practice I went through vimtutor and played <a href="http://vim-adventures.com/">vim adventures</a>. Now I&rsquo;m making a Javascript game with the Phaser framework that will make use of vim commands for controls</p>

<p><a name="tmux"></a></p>

<h3>Tmux</h3>

<p>&ldquo;<a href="https://tmux.github.io/">tmux</a> is a "terminal multiplexer&rdquo;, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen."</p>

<p>Tmux would have been an absolute lifesaver when I was back in school as I did a lot of my work by sshing into the school servers. It would have allowed me to login once and create multiple panes/windows instead of having to login multiple times. So many regrets. It has been instrumental for sshing in and working with my raspberry pi though.</p>

<p>First thing I did was change to prefix from ctrl+a to ctrl+b. The prefix is what you use before entering tmux commands. ctrl+a was originally saved for screen (since the creator of tmux used screen while developing tmux). However, ctrl+a is much easier on your fingers than ctrl+a.</p>

<p>The Art of the CommandLine recommended dtach for session persistence, but I found the redraw to be very buggy. So I looked around and found <a href="https://github.com/tmuxinator/tmuxinator">Tmuxinator</a>, which gas worked perfectly!</p>

<p><a name="profiles"></a></p>

<h3>Profiles</h3>

<p>You can find most of my <a href="https://github.com/nmlau/profiles">Profiles</a> here. This allows them to be cloned in and set up quickly and conveniently. It also allows me to keep track of them in one place. Since hitting &lsquo;ls -al&rsquo; in ~/ is kind of messy.</p>

<p>I messed around with my profiles and environment:</p>

<ul>
<li>Setup <a href="http://www.zsh.org/">zsh</a> and <a href="https://github.com/robbyrussell/oh-my-zsh">Oh My Zsh</a></li>
<li>Installed <a href="http://ethanschoonover.com/solarized">Solarized Dark theme</a> for terminal</li>
<li>Changed to <a href="https://www.iterm2.com/">iTerm2</a></li>
<li>Remapped keys: caps to control, remapping vims &lsquo;jk&rsquo; to escape</li>
<li>Fixed up <a href="http://brew.sh/">Homebrew</a> by getting rid of macports, fixing permissions, etc (lots of running &lsquo;brew doctor&rsquo;)</li>
<li>Changed host/terminal name</li>
<li>etc</li>
</ul>


<p><a name="onelinerforkillingapplications"></a></p>

<h3>One-liner for Killing Applications</h3>

<p>Art of the Command Line brought up these:</p>

<pre><code class="bash">ps -ax | grep Finder
kill -9 390
</code></pre>

<p>And I had run into this command: kill <code>jobs -ps</code>, when messing around with background processes</p>

<p>At the same time, I&rsquo;ve always been frustrated by how much time it takes to start up Activity Monitor, search for the offending process, and then clicking multiple times to force quit it. And I&rsquo;ve always got a terminal open so why not just use that and get it done with no waiting, few key presses, and zero clicks. So I looked back at these commands which were pretty close already. I figured I&rsquo;d learn some bash and try to combine them into a one liner that I could throw into an alias for my .zshrc.</p>

<p>I started with this, it read from jobs. And awk would pass the process id column to xargs which would call &lsquo;kill&rsquo; on them</p>

<pre><code class="bash">zsh: jobs -p | awk '{print $3}' | xargs kill
</code></pre>

<p>But jobs obviously wasn&rsquo;t right, we wanted &lsquo;ps -ax&rsquo; and to use grep to target the offending app. As well as &lsquo;kill -9&rsquo; to forcequit.</p>

<pre><code class="bash">ps -ax | grep Finder | awk '{print $3}'
ps -ax | grep 'TextEdit' | awk '{print $1}' | xargs kill -9
</code></pre>

<p>Now there was the issue of passing in the app name as a variable, which requires a <a href="http://stackoverflow.com/questions/941338/how-to-pass-command-line-arguments-to-a-shell-alias">bash function</a>.</p>

<pre><code class="bash">alias killapp='function _killapp(){ps -ax | grep $1 | awk '{print $1}' | xargs kill -9};_killapp'
</code></pre>

<p>However, now the the grep $1 and awk $1 interfere with eachother. You can pass grep directly to xargs, &lsquo;&hellip; grep $1 | xargs kill -9&rsquo;&hellip; but that&rsquo;s not ideal. I tried a few things, like using a variable. As well as a variety of backslashes and <a href="http://superuser.com/questions/114798/is-there-a-way-to-escape-single-quotes-in-the-shell">quotes around quotes</a></p>

<pre><code class="bash">alias killapptest='function _killapp(){arg1="$1"; ps -ax | grep $arg1 | awk "{print $1}";_killapp' //using variable
</code></pre>

<p>Eventually I found the way that worked, by <a href="http://stackoverflow.com/questions/7244534/using-awk-in-bash-alias-or-function">escaping the $</a>:</p>

<pre><code class="bash">* alias killapp='function _killapp(){ps -ax | grep $1 | awk "{print \$1}" | xargs kill -9};_killapp'
</code></pre>

<p>But not perfect, since grep would find itself. To solve this I found this <a href="http://unix.stackexchange.com/questions/74185/how-can-i-prevent-grep-from-showing-up-in-ps-results">stackoverflow thread</a> which recommended:</p>

<pre><code class="bash">pgrep or 'ps aux | grep -v grep | grep "fnord"'
</code></pre>

<p>Looking more into pgrep, I remembered seeing it along with pkill in the Art of the Command Line under <a href="https://github.com/jlevy/the-art-of-command-line#everyday-use">Everyday Use</a>. And so with some frustration, to quote myself at that moment:</p>

<blockquote><p>WELL LOOKS LIKE I JUST REINVENTED PGREP/PKILL, THERE GOES AN HOUR AND SOME PRIDE. WELL I GUESS I LEARNED SOMETHING AT LEAST</p></blockquote>
]]></content>
  </entry>
  
</feed>
